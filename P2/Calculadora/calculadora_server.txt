/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "calculadora.h"

res_calculo *
suma_1_svc(int arg1, int arg2,  struct svc_req *rqstp)
{
	static res_calculo  result;

	xdr_free(xdr_res_calculo, &result);
	result.res_calculo_u.resultado = arg1 + arg2;

	return &result;
}

res_calculo *
resta_1_svc(int arg1, int arg2,  struct svc_req *rqstp)
{
	static res_calculo  result;

	xdr_free(xdr_res_calculo, &result);
	result.res_calculo_u.resultado = arg1 - arg2;

	return &result;
}

res_calculo *
multiplicacion_1_svc(int arg1, int arg2,  struct svc_req *rqstp)
{
	static res_calculo  result;

	xdr_free(xdr_res_calculo, &result);
	result.res_calculo_u.resultado = arg1 * arg2;

	return &result;
}

res_calculo *
division_1_svc(int arg1, int arg2,  struct svc_req *rqstp)
{
	static res_calculo  result;

	xdr_free(xdr_res_calculo, &result);
	result.res_calculo_u.resultado = arg1 / arg2;

	return &result;
}

res_calculo_vectores *
sumavector_1_svc(vec arg1, vec arg2,  struct svc_req *rqstp)
{
	static res_calculo_vectores  result;
	xdr_free(xdr_res_calculo_vectores, &result);

	int tam = arg1.vec_len;

	result.res_calculo_vectores_u.resultado.vec_val = malloc(tam * sizeof(int));
	result.res_calculo_vectores_u.resultado.vec_len = tam;

	for(unsigned int i = 0; i < tam; i++)
		result.res_calculo_vectores_u.resultado.vec_val[i] = arg1.vec_val[i] + arg2.vec_val[i];

	return &result;
}

res_calculo_vectores *
restavector_1_svc(vec arg1, vec arg2,  struct svc_req *rqstp)
{
	static res_calculo_vectores  result;
	xdr_free(xdr_res_calculo_vectores, &result);

	int tam = arg1.vec_len;

	result.res_calculo_vectores_u.resultado.vec_val = malloc(tam * sizeof(int));
	result.res_calculo_vectores_u.resultado.vec_len = tam;

	for(unsigned int i = 0; i < tam; i++)
		result.res_calculo_vectores_u.resultado.vec_val[i] = arg1.vec_val[i] - arg2.vec_val[i];


	return &result;
}

res_calculo_vectores *
multiplicacionvector_1_svc(vec arg1, vec arg2,  struct svc_req *rqstp)
{
	static res_calculo_vectores  result;
	xdr_free(xdr_res_calculo_vectores, &result);

	int tam = arg1.vec_len;

	result.res_calculo_vectores_u.resultado.vec_val = malloc(tam * sizeof(int));
	result.res_calculo_vectores_u.resultado.vec_len = tam;

	for(unsigned int i = 0; i < tam; i++)
		result.res_calculo_vectores_u.resultado.vec_val[i] = arg1.vec_val[i] * arg2.vec_val[i];


	return &result;
}

res_calculo_vectores *
multiplicacionescalar_1_svc(vec arg1, int arg2,  struct svc_req *rqstp)
{
	static res_calculo_vectores  result;
	xdr_free(xdr_res_calculo_vectores, &result);

	int tam = arg1.vec_len;

	result.res_calculo_vectores_u.resultado.vec_val = malloc(tam * sizeof(int));
	result.res_calculo_vectores_u.resultado.vec_len = tam;

	for(unsigned int i = 0; i < tam; i++)
		result.res_calculo_vectores_u.resultado.vec_val[i] = arg1.vec_val[i] * arg2;

	return &result;
}

res_calculo_matrices *
sumamatriz_1_svc(matriz arg1, matriz arg2,  struct svc_req *rqstp)
{
	static res_calculo_matrices  result;
	xdr_free(xdr_res_calculo_matrices, &result);

	const int orden = arg1.orden;
	result.res_calculo_matrices_u.resultado.orden = orden;
	result.res_calculo_matrices_u.resultado.filas = malloc(sizeof(vec[orden]));

	for (unsigned int i = 0; i < orden; i++) {
		result.res_calculo_matrices_u.resultado.filas[i].vec_val = malloc(sizeof(int)*orden);
		result.res_calculo_matrices_u.resultado.filas[i].vec_len = orden;
	}

	for (unsigned int i = 0; i < orden; i++) {
		for(unsigned int j = 0; j < orden; j++) {
			result.res_calculo_matrices_u.resultado.filas[i].vec_val[j] = arg1.filas[i].vec_val[j] +
			                                                              arg2.filas[i].vec_val[j];
		}
	}

	return &result;
}

res_calculo_matrices *
restamatriz_1_svc(matriz arg1, matriz arg2,  struct svc_req *rqstp)
{
	static res_calculo_matrices  result;
	xdr_free(xdr_res_calculo_matrices, &result);

	const int orden = arg1.orden;
	result.res_calculo_matrices_u.resultado.orden = orden;
	result.res_calculo_matrices_u.resultado.filas = malloc(sizeof(vec[orden]));

	for (unsigned int i = 0; i < orden; i++) {
		result.res_calculo_matrices_u.resultado.filas[i].vec_val = malloc(sizeof(int)*orden);
		result.res_calculo_matrices_u.resultado.filas[i].vec_len = orden;
	}

	for (unsigned int i = 0; i < orden; i++) {
		for(unsigned int j = 0; j < orden; j++) {
			result.res_calculo_matrices_u.resultado.filas[i].vec_val[j] = arg1.filas[i].vec_val[j] -
			                                                              arg2.filas[i].vec_val[j];
		}
	}

	return &result;
}

res_calculo_matrices *
multiplicacionmatriz_1_svc(matriz arg1, matriz arg2,  struct svc_req *rqstp)
{
	static res_calculo_matrices  result;
	xdr_free(xdr_res_calculo_matrices, &result);

	const int orden = arg1.orden;
	result.res_calculo_matrices_u.resultado.orden = orden;
	result.res_calculo_matrices_u.resultado.filas = malloc(sizeof(vec[orden]));

	for (unsigned int i = 0; i < orden; i++) {
		result.res_calculo_matrices_u.resultado.filas[i].vec_val = malloc(sizeof(int)*orden);
		result.res_calculo_matrices_u.resultado.filas[i].vec_len = orden;
	}

	for (unsigned int i = 0; i < orden; i++) {
		for(unsigned int j = 0; j < orden; j++) {
			result.res_calculo_matrices_u.resultado.filas[i].vec_val[j] = arg1.filas[i].vec_val[j] *
			                                                              arg2.filas[i].vec_val[j];
		}
	}

	return &result;
}

res_calculo_matrices *
multiplicacionmatrizescalar_1_svc(matriz arg1, int arg2,  struct svc_req *rqstp)
{
	static res_calculo_matrices  result;
	xdr_free(xdr_res_calculo_matrices, &result);

	const int orden = arg1.orden;
	result.res_calculo_matrices_u.resultado.orden = orden;
	result.res_calculo_matrices_u.resultado.filas = malloc(sizeof(vec[orden]));

	for (unsigned int i = 0; i < orden; i++) {
		result.res_calculo_matrices_u.resultado.filas[i].vec_val = malloc(sizeof(int)*orden);
		result.res_calculo_matrices_u.resultado.filas[i].vec_len = orden;
	}

	for (unsigned int i = 0; i < orden; i++) {
		for(unsigned int j = 0; j < orden; j++) {
			result.res_calculo_matrices_u.resultado.filas[i].vec_val[j] = arg1.filas[i].vec_val[j] * arg2;
		}
	}

	return &result;

	return &result;
}
